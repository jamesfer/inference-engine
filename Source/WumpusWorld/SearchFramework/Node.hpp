#ifndef Node_hpp
#define Node_hpp


#include <vector>
#include <memory>
#include "Edge.hpp"
#include "State.hpp"

using namespace std;


/**
 * Search nodes are stored and generated by the searcher. It is their purpose
 * to keep track of a corresponding state object, as well as the the edge
 * that links this node to its parent. In this context the edge
 * originates at its parent and points down towards this node.
 */
template <class State_type>
class Node
{
public:
	typedef shared_ptr<State_type> State_ptr;
	typedef weak_ptr<Node> Node_ptr;
	typedef shared_ptr<Edge<State_type>> Edge_ptr;
	
private:
	/**
	 * Edge that was traversed to get to the next state.
	 */
	Edge_ptr edge;
	
	/**
	 * The state at this node.
	 */
	State_ptr state;
	
	/**
	 * Total cost of this branch of nodes
	 */
	int branchCost;
	
	/**
	 * Total number of parent nodes.
	 * The depth of this node in the tree.
	 * 0 means this node is the root node.
	 */
	int branchDepth;
	
public:
	/**
	 * Creates a search node from a corresponding state, parent node and 
	 * the action that was taken from the parent to end up at this node.
	 */
	Node(State_ptr state, Edge_ptr edge = nullptr) : edge(edge), state(state)
	{
		if (edge)
		{
			// The total branch cost is the cost of the parent + the cost of
			// this action.
			branchCost = edge->getAction()->getCost() + edge->getParent().lock()->getBranchCost();
			branchDepth = edge->getParent().lock()->getBranchDepth() + 1;
		}
		else
		{
			branchCost = 0;
			branchDepth = 0;
		}
	}
	
	
	virtual ~Node()
	{
	
	}
	
	
	/**
	 * Checks if the given state is the same as the state at this node.
	 */
	bool isState(const State_type& state) const
	{
		return *this->state == state;
	}
	
	
	/**
	 * Returns the parent of this node.
	 */
	Node_ptr getParent() const
	{
		if (edge) {
			return edge->getParent();
		}
		// Return an empty weak reference
		return Node_ptr();
	}
	
	
	/**
	 * Getter for edge
	 */
	Edge_ptr getEdge() const
	{
		return edge;
	}
	
	
	/**
	 * Returns the state at this node.
	 */
	State_ptr getState() const
	{
		return state;
	}
	
	
	/**
	 * Getter for branch cost
	 */
	int getBranchCost() const
	{
		return branchCost;
	}
	
	
	/**
	 * Getter for branch depth
	 */
	int getBranchDepth() const
	{
		return branchDepth;
	}
};

#endif /* Node_hpp */
